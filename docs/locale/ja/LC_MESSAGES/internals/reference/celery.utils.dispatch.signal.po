# 
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../internals/reference/celery.utils.dispatch.signal.rst:3
msgid "celery.utils.dispatch.signal"
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal:1
msgid "Signal class."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal:1
msgid "Base class for all signals"
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:1
msgid "Connect receiver to sender for signal."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:3
msgid ""
"A function or an instance method which is to receive signals. Receivers must"
" be hashable objects.  if weak is :const:`True`, then receiver must be weak-"
"referencable (more precisely :func:`saferef.safe_ref()` must be able to "
"create a reference to the receiver).  Receivers must be able to accept "
"keyword arguments.  If receivers have a `dispatch_uid` attribute, the "
"receiver will not be added if another receiver already exists with that "
"`dispatch_uid`."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:3
msgid ""
"A function or an instance method which is to receive signals. Receivers must"
" be hashable objects."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:6
msgid ""
"if weak is :const:`True`, then receiver must be weak-referencable (more "
"precisely :func:`saferef.safe_ref()` must be able to create a reference to "
"the receiver)."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:10
msgid "Receivers must be able to accept keyword arguments."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:12
msgid ""
"If receivers have a `dispatch_uid` attribute, the receiver will not be added"
" if another receiver already exists with that `dispatch_uid`."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:16
msgid ""
"The sender to which the receiver should respond. Must either be of type "
":class:`Signal`, or :const:`None` to receive events from any sender."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:20
msgid ""
"Whether to use weak references to the receiver. By default, the module will "
"attempt to use weak references to the receiver objects. If this parameter is"
" false, then strong references will be used."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.connect:25
msgid ""
"An identifier used to uniquely identify a particular instance of a receiver."
" This will usually be a string, though it may be anything hashable."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.disconnect:1
msgid "Disconnect receiver from sender for signal."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.disconnect:3
msgid ""
"If weak references are used, disconnect need not be called. The receiver "
"will be removed from dispatch automatically."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.disconnect:6
msgid ""
"The registered receiver to disconnect. May be none if `dispatch_uid` is "
"specified."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.disconnect:9
msgid "The registered sender to disconnect."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.disconnect:11
msgid "The weakref state to disconnect."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.disconnect:13
msgid "the unique identifier of the receiver to disconnect"
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send:1
msgid "Send signal from sender to all connected receivers."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send:3
msgid ""
"If any receiver raises an error, the error propagates back through send, "
"terminating the dispatch loop, so it is quite possible to not have all "
"receivers called if a raises an error."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send:7
msgid "The sender of the signal. Either a specific object or :const:`None`."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send:10
msgid "Named arguments which will be passed to receivers."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send:12
#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send_robust:11
msgid "a list of tuple pairs: `[(receiver, response), â€¦ ]`."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send_robust:1
msgid "Send signal from sender to all connected receivers catching errors."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send_robust:3
msgid ""
"The sender of the signal. Can be any python object (normally one registered "
"with a connect if you actually want something to occur)."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send_robust:7
msgid ""
"Named arguments which will be passed to receivers. These arguments must be a"
" subset of the argument names defined in :attr:`providing_args`."
msgstr ""

#: ../../../celery/utils/dispatch/signal.pydocstring of
#: celery.utils.dispatch.signal.Signal.send_robust:15
msgid ""
"if any receiver raises an error (specifically any subclass of "
":exc:`Exception`), the error instance is returned as the result for that "
"receiver."
msgstr ""
