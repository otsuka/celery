# 
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../internals/reference/celery.backends.base.rst:3
#: ../../../celery/backends/base.pydocstring of celery.backends.base:2
msgid "celery.backends.base"
msgstr ""

#: ../../../celery/backends/base.pydocstring of celery.backends.base:4
msgid "Result backend base classes."
msgstr ""

#: ../../../celery/backends/base.pydocstring of celery.backends.base:6
msgid ":class:`BaseBackend` defines the interface."
msgstr ""

#: ../../../celery/backends/base.pydocstring of celery.backends.base:8
msgid ""
":class:`KeyValueStoreBackend` is a common base class using K/V semantics "
"like _get and _put."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.TimeoutError:1
msgid "The operation timed out."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.cleanup:1
msgid ""
"Backend cleanup. Is run by :class:`celery.task.DeleteExpiredTaskMetaTask`."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.exception_to_python:1
msgid "Convert serialized exception to Python exception."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.get_children:1
msgid "Get the list of subtasks sent by a task."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.get_result:1
msgid "Get the result of a task."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.get_status:1
msgid "Get the status of a task."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.get_traceback:1
msgid "Get the traceback for a failed task."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.mark_as_done:1
msgid "Mark task as successfully executed."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.mark_as_failure:1
msgid "Mark task as executed with failure. Stores the execption."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.mark_as_retry:1
msgid "Mark task as being retries. Stores the current exception (if any)."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.mark_as_started:1
msgid "Mark a task as started"
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.persistent:1
msgid "Set to true if the backend is peristent by default."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.prepare_exception:1
msgid "Prepare exception for serialization."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.prepare_value:1
msgid "Prepare value for storage."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.process_cleanup:1
msgid "Cleanup actions to do at the end of a task worker process."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.reload_group_result:1
msgid "Reload group result, even if it has been previously fetched."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.reload_task_result:1
msgid "Reload task result, even if it has been previously fetched."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.restore_group:1
msgid "Get the result for a group."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.save_group:1
msgid "Store the result of an executed group."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.store_result:1
msgid "Update task state and result."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.subpolling_interval:1
msgid ""
"Time to sleep between polling each individual item in `ResultSet.iterate`. "
"as opposed to the `interval` argument which is for each pass."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.supports_autoexpire:1
msgid ""
"If true the backend must automatically expire results. The daily "
"backend_cleanup periodic task will not be triggered in this case."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.supports_native_join:1
msgid "If true the backend must implement :meth:`get_many`."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.wait_for:1
msgid "Wait for task and return its result."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.wait_for:3
msgid ""
"If the task raises an exception, this exception will be re-raised by "
":func:`wait_for`."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.BaseBackend.wait_for:6
msgid ""
"If `timeout` is not :const:`None`, this raises the "
":class:`celery.exceptions.TimeoutError` exception if the operation takes "
"longer than `timeout` seconds."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.KeyValueStoreBackend.get_key_for_chord:1
msgid "Get the cache key for the chord waiting on group with given id."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.KeyValueStoreBackend.get_key_for_group:1
msgid "Get the cache key for a group by id."
msgstr ""

#: ../../../celery/backends/base.pydocstring of
#: celery.backends.base.KeyValueStoreBackend.get_key_for_task:1
msgid "Get the cache key for a task by id."
msgstr ""
