# 
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../userguide/monitoring.rst:5
msgid "Monitoring and Management Guide"
msgstr ""

#: ../../userguide/monitoring.rst:11
msgid "Introduction"
msgstr ""

#: ../../userguide/monitoring.rst:13
msgid ""
"There are several tools available to monitor and inspect Celery clusters."
msgstr ""

#: ../../userguide/monitoring.rst:15
msgid ""
"This document describes some of these, as as well as features related to "
"monitoring, like events and broadcast commands."
msgstr ""

#: ../../userguide/monitoring.rst:21
msgid "Workers"
msgstr ""

#: ../../userguide/monitoring.rst:26
msgid "Management Command-line Utilities (``inspect``/``control``)"
msgstr ""

#: ../../userguide/monitoring.rst:29
msgid ""
":program:`celery` can also be used to inspect and manage worker nodes (and "
"to some degree tasks)."
msgstr ""

#: ../../userguide/monitoring.rst:32
msgid "To list all the commands available do:"
msgstr ""

#: ../../userguide/monitoring.rst:38
msgid "or to get help for a specific command do:"
msgstr ""

#: ../../userguide/monitoring.rst:45
msgid "Commands"
msgstr ""

#: ../../userguide/monitoring.rst:47
msgid "**shell**: Drop into a Python shell."
msgstr ""

#: ../../userguide/monitoring.rst:49
msgid ""
"The locals will include the ``celery`` variable, which is the current app. "
"Also all known tasks will be automatically added to locals (unless the "
"``--without-tasks`` flag is set)."
msgstr ""

#: ../../userguide/monitoring.rst:53
msgid ""
"Uses Ipython, bpython, or regular python in that order if installed. You can"
" force an implementation using ``--force-ipython|-I``, ``--force-"
"bpython|-B``, or ``--force-python|-P``."
msgstr ""

#: ../../userguide/monitoring.rst:57
msgid "**status**: List active nodes in this cluster"
msgstr ""

#: ../../userguide/monitoring.rst:63
msgid "**result**: Show the result of a task"
msgstr ""

#: ../../userguide/monitoring.rst:69
msgid ""
"Note that you can omit the name of the task as long as the task doesn't use "
"a custom result backend."
msgstr ""

#: ../../userguide/monitoring.rst:72
msgid "**purge**: Purge messages from all configured task queues."
msgstr ""

#: ../../userguide/monitoring.rst:79
msgid ""
"There is no undo for this operation, and messages will be permanently "
"deleted!"
msgstr ""

#: ../../userguide/monitoring.rst:82
msgid "**inspect active**: List active tasks"
msgstr ""

#: ../../userguide/monitoring.rst:88
msgid "These are all the tasks that are currently being executed."
msgstr ""

#: ../../userguide/monitoring.rst:90
msgid "**inspect scheduled**: List scheduled ETA tasks"
msgstr ""

#: ../../userguide/monitoring.rst:96
msgid ""
"These are tasks reserved by the worker because they have the `eta` or "
"`countdown` argument set."
msgstr ""

#: ../../userguide/monitoring.rst:99
msgid "**inspect reserved**: List reserved tasks"
msgstr ""

#: ../../userguide/monitoring.rst:105
msgid ""
"This will list all tasks that have been prefetched by the worker, and is "
"currently waiting to be executed (does not include tasks with an eta)."
msgstr ""

#: ../../userguide/monitoring.rst:109
msgid "**inspect revoked**: List history of revoked tasks"
msgstr ""

#: ../../userguide/monitoring.rst:115
msgid "**inspect registered**: List registered tasks"
msgstr ""

#: ../../userguide/monitoring.rst:121
msgid ""
"**inspect stats**: Show worker statistics (see :ref:`worker-statistics`)"
msgstr ""

#: ../../userguide/monitoring.rst:127
msgid "**control enable_events**: Enable events"
msgstr ""

#: ../../userguide/monitoring.rst:133
msgid "**control disable_events**: Disable events"
msgstr ""

#: ../../userguide/monitoring.rst:139
msgid ""
"**migrate**: Migrate tasks from one broker to another (**EXPERIMENTAL**)."
msgstr ""

#: ../../userguide/monitoring.rst:145
msgid ""
"This command will migrate all the tasks on one broker to another. As this "
"command is new and experimental you should be sure to have a backup of the "
"data before proceeding."
msgstr ""

#: ../../userguide/monitoring.rst:151
msgid ""
"All ``inspect`` and ``control`` commands supports a ``--timeout`` argument, "
"This is the number of seconds to wait for responses. You may have to "
"increase this timeout if you're not getting a response due to latency."
msgstr ""

#: ../../userguide/monitoring.rst:159
msgid "Specifying destination nodes"
msgstr ""

#: ../../userguide/monitoring.rst:161
msgid ""
"By default the inspect and control commands operates on all workers. You can"
" specify a single, or a list of workers by using the `--destination` "
"argument:"
msgstr ""

#: ../../userguide/monitoring.rst:175
msgid "Flower: Real-time Celery web-monitor"
msgstr ""

#: ../../userguide/monitoring.rst:177
msgid ""
"Flower is a real-time web based monitor and administration tool for Celery. "
"It is under active development, but is already an essential tool. Being the "
"recommended monitor for Celery, it obsoletes the Django-Admin monitor, "
"celerymon and the ncurses based monitor."
msgstr ""

#: ../../userguide/monitoring.rst:182
msgid ""
"Flower is pronounced like \"flow\", but you can also use the botanical "
"version if you prefer."
msgstr ""

#: ../../userguide/monitoring.rst:186
msgid "Features"
msgstr ""

#: ../../userguide/monitoring.rst:188
msgid "Real-time monitoring using Celery Events"
msgstr ""

#: ../../userguide/monitoring.rst:190
msgid "Task progress and history."
msgstr ""

#: ../../userguide/monitoring.rst:191
msgid ""
"Ability to show task details (arguments, start time, runtime, and more)"
msgstr ""

#: ../../userguide/monitoring.rst:192
msgid "Graphs and statistics"
msgstr ""

#: ../../userguide/monitoring.rst:194
msgid "Remote Control"
msgstr ""

#: ../../userguide/monitoring.rst:196
msgid "View worker status and statistics."
msgstr ""

#: ../../userguide/monitoring.rst:197
msgid "Shutdown and restart worker instances."
msgstr ""

#: ../../userguide/monitoring.rst:198
msgid "Control worker pool size and autoscale settings."
msgstr ""

#: ../../userguide/monitoring.rst:199
msgid "View and modify the queues a worker instance consumes from."
msgstr ""

#: ../../userguide/monitoring.rst:200
msgid "View currently running tasks"
msgstr ""

#: ../../userguide/monitoring.rst:201
msgid "View scheduled tasks (ETA/countdown)"
msgstr ""

#: ../../userguide/monitoring.rst:202
msgid "View reserved and revoked tasks"
msgstr ""

#: ../../userguide/monitoring.rst:203
msgid "Apply time and rate limits"
msgstr ""

#: ../../userguide/monitoring.rst:204
msgid "Configuration viewer"
msgstr ""

#: ../../userguide/monitoring.rst:205
msgid "Revoke or terminate tasks"
msgstr ""

#: ../../userguide/monitoring.rst:207
msgid "HTTP API"
msgstr ""

#: ../../userguide/monitoring.rst:208
msgid "OpenID authentication"
msgstr ""

#: ../../userguide/monitoring.rst:210
msgid "**Screenshots**"
msgstr ""

#: ../../userguide/monitoring.rst:218
msgid "More screenshots_:"
msgstr ""

#: ../../userguide/monitoring.rst:223
msgid "Usage"
msgstr ""

#: ../../userguide/monitoring.rst:225
msgid "You can use pip to install Flower:"
msgstr ""

#: ../../userguide/monitoring.rst:231
msgid "Running the flower command will start a web-server that you can visit:"
msgstr ""

#: ../../userguide/monitoring.rst:237
msgid ""
"The default port is http://localhost:5555, but you can change this using the"
" `--port` argument:"
msgstr ""

#: ../../userguide/monitoring.rst:243
msgid "Broker URL can also be passed through the `--broker` argument :"
msgstr ""

#: ../../userguide/monitoring.rst:251
msgid "Then, you can visit flower in your web browser :"
msgstr ""

#: ../../userguide/monitoring.rst:262
msgid "celery events: Curses Monitor"
msgstr ""

#: ../../userguide/monitoring.rst:266
msgid ""
"`celery events` is a simple curses monitor displaying task and worker "
"history.  You can inspect the result and traceback of tasks, and it also "
"supports some management commands like rate limiting and shutting down "
"workers.  This monitor was started as a proof of concept, and you probably "
"want to use Flower instead."
msgstr ""

#: ../../userguide/monitoring.rst:272
msgid "Starting:"
msgstr ""

#: ../../userguide/monitoring.rst:278
msgid "You should see a screen like:"
msgstr ""

#: ../../userguide/monitoring.rst:283
msgid ""
"`celery events` is also used to start snapshot cameras (see :ref"
":`monitoring-snapshots`:"
msgstr ""

#: ../../userguide/monitoring.rst:290
msgid "and it includes a tool to dump events to :file:`stdout`:"
msgstr ""

#: ../../userguide/monitoring.rst:296
msgid "For a complete list of options use ``--help``:"
msgstr ""

#: ../../userguide/monitoring.rst:307
msgid "RabbitMQ"
msgstr ""

#: ../../userguide/monitoring.rst:309
msgid ""
"To manage a Celery cluster it is important to know how RabbitMQ can be "
"monitored."
msgstr ""

#: ../../userguide/monitoring.rst:312
msgid ""
"RabbitMQ ships with the `rabbitmqctl(1)`_ command, with this you can list "
"queues, exchanges, bindings, queue lengths, the memory usage of each queue, "
"as well as manage users, virtual hosts and their permissions."
msgstr ""

#: ../../userguide/monitoring.rst:319
msgid ""
"The default virtual host (``\"/\"``) is used in these examples, if you use a"
" custom virtual host you have to add the ``-p`` argument to the command, "
"e.g: ``rabbitmqctl list_queues -p my_vhost â€¦``"
msgstr ""

#: ../../userguide/monitoring.rst:329 ../../userguide/monitoring.rst:373
msgid "Inspecting queues"
msgstr ""

#: ../../userguide/monitoring.rst:331 ../../userguide/monitoring.rst:375
msgid "Finding the number of tasks in a queue:"
msgstr ""

#: ../../userguide/monitoring.rst:339
msgid ""
"Here `messages_ready` is the number of messages ready for delivery (sent but"
" not received), `messages_unacknowledged` is the number of messages that has"
" been received by a worker but not acknowledged yet (meaning it is in "
"progress, or has been reserved). `messages` is the sum of ready and "
"unacknowledged messages."
msgstr ""

#: ../../userguide/monitoring.rst:346
msgid "Finding the number of workers currently consuming from a queue:"
msgstr ""

#: ../../userguide/monitoring.rst:352
msgid "Finding the amount of memory allocated to a queue:"
msgstr ""

#: ../../userguide/monitoring.rst:358
msgid ""
"Adding the ``-q`` option to `rabbitmqctl(1)`_ makes the output easier to "
"parse."
msgstr ""

#: ../../userguide/monitoring.rst:365
msgid "Redis"
msgstr ""

#: ../../userguide/monitoring.rst:367
msgid ""
"If you're using Redis as the broker, you can monitor the Celery cluster "
"using the `redis-cli(1)` command to list lengths of queues."
msgstr ""

#: ../../userguide/monitoring.rst:381
msgid ""
"The default queue is named `celery`. To get all available queues, invoke:"
msgstr ""

#: ../../userguide/monitoring.rst:389
msgid ""
"Queue keys only exists when there are tasks in them, so if a key does not "
"exist it simply means there are no messages in that queue. This is because "
"in Redis a list with no elements in it is automatically removed, and hence "
"it won't show up in the `keys` command output, and `llen` for that list "
"returns 0."
msgstr ""

#: ../../userguide/monitoring.rst:395
msgid ""
"Also, if you're using Redis for other purposes, the output of the `keys` "
"command will include unrelated values stored in the database.  The "
"recommended way around this is to use a dedicated `DATABASE_NUMBER` for "
"Celery, you can also use database numbers to separate Celery applications "
"from each other (virtual hosts), but this will not affect the monitoring "
"events used by e.g. Flower as Redis pub/sub commands are global rather than "
"database based."
msgstr ""

#: ../../userguide/monitoring.rst:406
msgid "Munin"
msgstr ""

#: ../../userguide/monitoring.rst:408
msgid ""
"This is a list of known Munin plug-ins that can be useful when maintaining a"
" Celery cluster."
msgstr ""

#: ../../userguide/monitoring.rst:411
msgid "rabbitmq-munin: Munin plug-ins for RabbitMQ."
msgstr ""

#: ../../userguide/monitoring.rst:413
msgid "http://github.com/ask/rabbitmq-munin"
msgstr ""

#: ../../userguide/monitoring.rst:415
msgid ""
"celery_tasks: Monitors the number of times each task type has been executed "
"(requires `celerymon`)."
msgstr ""

#: ../../userguide/monitoring.rst:418
msgid "http://exchange.munin-monitoring.org/plugins/celery_tasks-2/details"
msgstr ""

#: ../../userguide/monitoring.rst:420
msgid ""
"celery_task_states: Monitors the number of tasks in each state (requires "
"`celerymon`)."
msgstr ""

#: ../../userguide/monitoring.rst:423
msgid "http://exchange.munin-monitoring.org/plugins/celery_tasks/details"
msgstr ""

#: ../../userguide/monitoring.rst:429
msgid "Events"
msgstr ""

#: ../../userguide/monitoring.rst:431
msgid ""
"The worker has the ability to send a message whenever some event happens.  "
"These events are then captured by tools like Flower, and :program:`celery "
"events` to monitor the cluster."
msgstr ""

#: ../../userguide/monitoring.rst:438
msgid "Snapshots"
msgstr ""

#: ../../userguide/monitoring.rst:442
msgid ""
"Even a single worker can produce a huge amount of events, so storing the "
"history of all events on disk may be very expensive."
msgstr ""

#: ../../userguide/monitoring.rst:445
msgid ""
"A sequence of events describes the cluster state in that time period, by "
"taking periodic snapshots of this state you can keep all history, but still "
"only periodically write it to disk."
msgstr ""

#: ../../userguide/monitoring.rst:449
msgid ""
"To take snapshots you need a Camera class, with this you can define what "
"should happen every time the state is captured;  You can write it to a "
"database, send it by email or something else entirely."
msgstr ""

#: ../../userguide/monitoring.rst:453
msgid ""
":program:`celery events` is then used to take snapshots with the camera, for"
" example if you want to capture state every 2 seconds using the camera "
"``myapp.Camera`` you run :program:`celery events` with the following "
"arguments:"
msgstr ""

#: ../../userguide/monitoring.rst:466
msgid "Custom Camera"
msgstr ""

#: ../../userguide/monitoring.rst:468
msgid ""
"Cameras can be useful if you need to capture events and do something with "
"those events at an interval.  For real-time event processing you should use "
":class:`@events.Receiver` directly, like in :ref:`event-real-time-example`."
msgstr ""

#: ../../userguide/monitoring.rst:473
msgid "Here is an example camera, dumping the snapshot to screen:"
msgstr ""

#: ../../userguide/monitoring.rst:492
msgid ""
"See the API reference for :mod:`celery.events.state` to read more about "
"state objects."
msgstr ""

#: ../../userguide/monitoring.rst:495
msgid ""
"Now you can use this cam with :program:`celery events` by specifying it with"
" the :option:`-c` option:"
msgstr ""

#: ../../userguide/monitoring.rst:502
msgid "Or you can use it programmatically like this:"
msgstr ""

#: ../../userguide/monitoring.rst:523
msgid "Real-time processing"
msgstr ""

#: ../../userguide/monitoring.rst:525
msgid "To process events in real-time you need the following"
msgstr ""

#: ../../userguide/monitoring.rst:527
msgid "An event consumer (this is the ``Receiver``)"
msgstr ""

#: ../../userguide/monitoring.rst:529
msgid "A set of handlers called when events come in."
msgstr ""

#: ../../userguide/monitoring.rst:531
msgid ""
"You can have different handlers for each event type, or a catch-all handler "
"can be used ('*')"
msgstr ""

#: ../../userguide/monitoring.rst:534
msgid "State (optional)"
msgstr ""

#: ../../userguide/monitoring.rst:536
msgid ""
":class:`@events.State` is a convenient in-memory representation of tasks and"
" workers in the cluster that is updated as events come in."
msgstr ""

#: ../../userguide/monitoring.rst:539
msgid ""
"It encapsulates solutions for many common things, like checking if a worker "
"is still alive (by verifying heartbeats), merging event fields together as "
"events come in, making sure timestamps are in sync, and so on."
msgstr ""

#: ../../userguide/monitoring.rst:544
msgid "Combining these you can easily process events in real-time:"
msgstr ""

#: ../../userguide/monitoring.rst:577
msgid ""
"The wakeup argument to ``capture`` sends a signal to all workers to force "
"them to send a heartbeat.  This way you can immediately see workers when the"
" monitor starts."
msgstr ""

#: ../../userguide/monitoring.rst:582
msgid "You can listen to specific events by specifying the handlers:"
msgstr ""

#: ../../userguide/monitoring.rst:613
msgid "Event Reference"
msgstr ""

#: ../../userguide/monitoring.rst:615
msgid "This list contains the events sent by the worker, and their arguments."
msgstr ""

#: ../../userguide/monitoring.rst:620
msgid "Task Events"
msgstr ""

#: ../../userguide/monitoring.rst:625
msgid "task-sent"
msgstr ""

#: ../../userguide/monitoring.rst:627
msgid ""
"``task-sent(uuid, name, args, kwargs, retries, eta, expires, queue, "
"exchange, routing_key)``"
msgstr ""

#: ../../userguide/monitoring.rst:630
msgid ""
"Sent when a task message is published and the "
":setting:`CELERY_SEND_TASK_SENT_EVENT` setting is enabled."
msgstr ""

#: ../../userguide/monitoring.rst:636
msgid "task-received"
msgstr ""

#: ../../userguide/monitoring.rst:638
msgid ""
"``task-received(uuid, name, args, kwargs, retries, eta, hostname, "
"timestamp)``"
msgstr ""

#: ../../userguide/monitoring.rst:641
msgid "Sent when the worker receives a task."
msgstr ""

#: ../../userguide/monitoring.rst:646
msgid "task-started"
msgstr ""

#: ../../userguide/monitoring.rst:648
msgid "``task-started(uuid, hostname, timestamp, pid)``"
msgstr ""

#: ../../userguide/monitoring.rst:650
msgid "Sent just before the worker executes the task."
msgstr ""

#: ../../userguide/monitoring.rst:655
msgid "task-succeeded"
msgstr ""

#: ../../userguide/monitoring.rst:657
msgid "``task-succeeded(uuid, result, runtime, hostname, timestamp)``"
msgstr ""

#: ../../userguide/monitoring.rst:659
msgid "Sent if the task executed successfully."
msgstr ""

#: ../../userguide/monitoring.rst:661
msgid ""
"Runtime is the time it took to execute the task using the pool. (Starting "
"from the task is sent to the worker pool, and ending when the pool result "
"handler callback is called)."
msgstr ""

#: ../../userguide/monitoring.rst:668
msgid "task-failed"
msgstr ""

#: ../../userguide/monitoring.rst:670
msgid "``task-failed(uuid, exception, traceback, hostname, timestamp)``"
msgstr ""

#: ../../userguide/monitoring.rst:672
msgid "Sent if the execution of the task failed."
msgstr ""

#: ../../userguide/monitoring.rst:677
msgid "task-revoked"
msgstr ""

#: ../../userguide/monitoring.rst:679
msgid "``task-revoked(uuid, terminated, signum, expired)``"
msgstr ""

#: ../../userguide/monitoring.rst:681
msgid ""
"Sent if the task has been revoked (Note that this is likely to be sent by "
"more than one worker)."
msgstr ""

#: ../../userguide/monitoring.rst:685
msgid "``terminated`` is set to true if the task process was terminated,"
msgstr ""

#: ../../userguide/monitoring.rst:685
msgid "and the ``signum`` field set to the signal used."
msgstr ""

#: ../../userguide/monitoring.rst:687
msgid "``expired`` is set to true if the task expired."
msgstr ""

#: ../../userguide/monitoring.rst:692
msgid "task-retried"
msgstr ""

#: ../../userguide/monitoring.rst:694
msgid "``task-retried(uuid, exception, traceback, hostname, timestamp)``"
msgstr ""

#: ../../userguide/monitoring.rst:696
msgid "Sent if the task failed, but will be retried in the future."
msgstr ""

#: ../../userguide/monitoring.rst:701
msgid "Worker Events"
msgstr ""

#: ../../userguide/monitoring.rst:706
msgid "worker-online"
msgstr ""

#: ../../userguide/monitoring.rst:708
msgid "``worker-online(hostname, timestamp, freq, sw_ident, sw_ver, sw_sys)``"
msgstr ""

#: ../../userguide/monitoring.rst:710
msgid "The worker has connected to the broker and is online."
msgstr ""

#: ../../userguide/monitoring.rst:712 ../../userguide/monitoring.rst:730
msgid "`hostname`: Hostname of the worker."
msgstr ""

#: ../../userguide/monitoring.rst:713 ../../userguide/monitoring.rst:731
msgid "`timestamp`: Event timestamp."
msgstr ""

#: ../../userguide/monitoring.rst:714 ../../userguide/monitoring.rst:732
msgid "`freq`: Heartbeat frequency in seconds (float)."
msgstr ""

#: ../../userguide/monitoring.rst:715 ../../userguide/monitoring.rst:733
msgid "`sw_ident`: Name of worker software (e.g. ``py-celery``)."
msgstr ""

#: ../../userguide/monitoring.rst:716 ../../userguide/monitoring.rst:734
msgid "`sw_ver`: Software version (e.g. 2.2.0)."
msgstr ""

#: ../../userguide/monitoring.rst:717 ../../userguide/monitoring.rst:735
msgid "`sw_sys`: Operating System (e.g. Linux, Windows, Darwin)."
msgstr ""

#: ../../userguide/monitoring.rst:722
msgid "worker-heartbeat"
msgstr ""

#: ../../userguide/monitoring.rst:724
msgid ""
"``worker-heartbeat(hostname, timestamp, freq, sw_ident, sw_ver, sw_sys, "
"active, processed)``"
msgstr ""

#: ../../userguide/monitoring.rst:727
msgid ""
"Sent every minute, if the worker has not sent a heartbeat in 2 minutes, it "
"is considered to be offline."
msgstr ""

#: ../../userguide/monitoring.rst:736
msgid "`active`: Number of currently executing tasks."
msgstr ""

#: ../../userguide/monitoring.rst:737
msgid "`processed`: Total number of tasks processed by this worker."
msgstr ""

#: ../../userguide/monitoring.rst:742
msgid "worker-offline"
msgstr ""

#: ../../userguide/monitoring.rst:744
msgid ""
"``worker-offline(hostname, timestamp, freq, sw_ident, sw_ver, sw_sys)``"
msgstr ""

#: ../../userguide/monitoring.rst:746
msgid "The worker has disconnected from the broker."
msgstr ""
