#
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../getting-started/first-steps-with-celery.rst:6
msgid "First Steps with Celery"
msgstr "Celery First ステップ"

#: ../../getting-started/first-steps-with-celery.rst:8
msgid ""
"Celery is a task queue with batteries included. It is easy to use so that "
"you can get started without learning the full complexities of the problem it"
" solves. It is designed around best practices so that your product can scale"
" and integrate with other languages, and it comes with the tools and support"
" you need to run such a system in production."
msgstr ""
"Celery は「バッテリー同梱」のタスクキューです。"
"Celery が持つ数々の機能をすべて学ばなくとも、すぐに使い始めることができます。"
"あなたのプロダクトがスケールし、他の言語とも連携できるようベストプラクティスに基づいて設計されており、"
"運用環境で稼動させるのに必要なツールとサポートが提供されています。"

#: ../../getting-started/first-steps-with-celery.rst:15
msgid ""
"In this tutorial you will learn the absolute basics of using Celery. You "
"will learn about;"
msgstr ""
"このチュートリアルでは Celery を使うための基本を学んでいきます。"

#: ../../getting-started/first-steps-with-celery.rst:18
msgid "Choosing and installing a message transport (broker)."
msgstr "メッセージトランスポート(ブローカー)の選定とインストール"

#: ../../getting-started/first-steps-with-celery.rst:19
msgid "Installing Celery and creating your first task"
msgstr "Celery のインストールとタスクの作成"

#: ../../getting-started/first-steps-with-celery.rst:20
msgid "Starting the worker and calling tasks."
msgstr "ワーカーの起動とタスクの呼び出し"

#: ../../getting-started/first-steps-with-celery.rst:21
msgid ""
"Keeping track of tasks as they transition through different states, and "
"inspecting return values."
msgstr ""
"タスクの状態遷移の追跡と、戻り値の取得"

#: ../../getting-started/first-steps-with-celery.rst:24
msgid ""
"Celery may seem daunting at first - but don't worry - this tutorial will get"
" you started in no time. It is deliberately kept simple, so to not confuse "
"you with advanced features. After you have finished this tutorial it's a "
"good idea to browse the rest of the documentation, for example the :ref"
":`next-steps` tutorial, which will showcase Celery's capabilities."
msgstr ""
"最初は Celery がとっつきにくく見えることでしょう。ですが心配することはありません。"
"このチュートリアルを読めばすぐに始められるようになります。あなたを困惑させないよう、"
"基本的な機能に絞ってあります。"
"まずはこのチュートリアルを終えてから残りのドキュメントを読むといいでしょう。"
"例えば :ref:`next-steps` チュートリアルに進めば Celery に備わった様々な機能を見られます。"

#: ../../getting-started/first-steps-with-celery.rst:38
msgid "Choosing a Broker"
msgstr "ブローカーの選定"

#: ../../getting-started/first-steps-with-celery.rst:40
msgid ""
"Celery requires a solution to send and receive messages, usually this comes "
"in the form of a separate service called a *message broker*."
msgstr ""
"Celery はメッセージの送信と受信を行うソリューションを必要とします。"
"通常これは *メッセージブローカー* と呼ばれる独立したサービスの形で提供されます。"

#: ../../getting-started/first-steps-with-celery.rst:43
msgid "There are several choices available, including:"
msgstr "利用可能なサービスを以下に挙げます。"

#: ../../getting-started/first-steps-with-celery.rst:46
msgid "RabbitMQ"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:48
msgid ""
"`RabbitMQ`_ is feature-complete, stable, durable and easy to install. It's "
"an excellent choice for a production environment. Detailed information about"
" using RabbitMQ with Celery:"
msgstr ""
"`RabbitMQ`_ は Celery の全機能をサポートし、安定しており、インストールも簡単です。"
""

#: ../../getting-started/first-steps-with-celery.rst:52
msgid ":ref:`broker-rabbitmq`"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:56
msgid ""
"If you are using Ubuntu or Debian install RabbitMQ by executing this "
"command:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:63
msgid ""
"When the command completes the broker is already running in the background, "
"ready to move messages for you: ``Starting rabbitmq-server: SUCCESS``."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:66
msgid ""
"And don't worry if you're not running Ubuntu or Debian, you can go to this "
"website to find similarly simple installation instructions for other "
"platforms, including Microsoft Windows:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:70
msgid "http://www.rabbitmq.com/download.html"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:74
msgid "Redis"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:76
msgid ""
"`Redis`_ is also feature-complete, but is more susceptible to data loss in "
"the event of abrupt termination or power failures. Detailed information "
"about using Redis:"
msgstr ""
"`Redis`_ もまた全機能を実装したものですが、不意な停止や停電といったトラブルの際には"
"データロスに繋がりやすい性質を持ちます。詳細については次のページをご覧ください。"

#: ../../getting-started/first-steps-with-celery.rst:79
msgid ":ref:`broker-redis`"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:85
msgid "Using a database"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:87
msgid ""
"Using a database as a message queue is not recommended, but can be "
"sufficient for very small installations.  Your options include:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:90
msgid ":ref:`broker-sqlalchemy`"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:91
msgid ":ref:`broker-django`"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:93
msgid ""
"If you're already using a Django database for example, using it as your "
"message broker can be convenient while developing even if you use a more "
"robust system in production."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:98
msgid "Other brokers"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:100
msgid ""
"In addition to the above, there are other experimental transport "
"implementations to choose from, including :ref:`Amazon SQS <broker-sqs>`, "
":ref:`broker-mongodb` and :ref:`IronMQ <broker-ironmq>`."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:104
msgid "See :ref:`broker-overview` for a full list."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:109
msgid "Installing Celery"
msgstr "Celery のインストール"

#: ../../getting-started/first-steps-with-celery.rst:111
msgid ""
"Celery is on the Python Package Index (PyPI), so it can be installed with "
"standard Python tools like ``pip`` or ``easy_install``:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:119
msgid "Application"
msgstr "アプリケーション"

#: ../../getting-started/first-steps-with-celery.rst:121
msgid ""
"The first thing you need is a Celery instance, this is called the celery "
"application or just app in short.  Since this instance is used as the entry-"
"point for everything you want to do in Celery, like creating tasks and "
"managing workers, it must be possible for other modules to import it."
msgstr ""
"まず初めに必要なものは Celery のインスタンスで、これは celery application または"
"縮めて app と呼ばれます。このインスタンスが、タスクの生成やワーカーの管理といった "
"Celery で行うすべてのことのエントリーポイントとなるため、他のモジュールがインポート"
"できるようにしておかなければいけません。"

#: ../../getting-started/first-steps-with-celery.rst:126
msgid ""
"In this tutorial you will keep everything contained in a single module, but "
"for larger projects you want to create a :ref:`dedicated module <project-"
"layout>`."
msgstr ""
"このチュートリアルでは単一のモジュールにすべてのコードを入れていますが、"
"大きなプロジェクトでは :ref:`専用のモジュール <project-layout>` を作ることになるでしょう。"

#: ../../getting-started/first-steps-with-celery.rst:130
msgid "Let's create the file :file:`tasks.py`:"
msgstr "では :file:`tasks.py` というファイルを作りましょう。"

#: ../../getting-started/first-steps-with-celery.rst:142
msgid ""
"The first argument to :class:`~celery.app.Celery` is the name of the current"
" module, this is needed so that names can be automatically generated, the "
"second argument is the broker keyword argument which specifies the URL of "
"the message broker you want to use, using RabbitMQ here, which is already "
"the default option.  See :ref:`celerytut-broker` above for more choices, "
"e.g. for RabbitMQ you can use ``amqp://localhost``, or for Redis you can use"
" ``redis://localhost``."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:150
msgid ""
"You defined a single task, called ``add``, which returns the sum of two "
"numbers."
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:155
msgid "Running the celery worker server"
msgstr "Celery ワーカーサーバの起動"

#: ../../getting-started/first-steps-with-celery.rst:157
msgid ""
"You now run the worker by executing our program with the ``worker`` "
"argument:"
msgstr ""
"Celery プログラムに ``worker`` 引数を付けて実行し、ワーカーを起動させます。"

#: ../../getting-started/first-steps-with-celery.rst:166
msgid ""
"See the :ref:`celerytut-troubleshooting` section if the worker does not "
"start."
msgstr ""
"ワーカーが起動しない場合は :ref:`celerytut-troubleshooting` セクションを参照してください。"

#: ../../getting-started/first-steps-with-celery.rst:169
msgid ""
"In production you will want to run the worker in the background as a daemon."
"  To do this you need to use the tools provided by your platform, or "
"something like `supervisord`_ (see :ref:`daemonizing` for more information)."
msgstr ""
"運用時には、ワーカーをデーモンとしてバックグラウンドで実行したいことと思います。"
"そのためには運用するプラットフォームが提供するツールや、`supervisord`_ (詳細は :ref:`daemonizing` を参照)"
"のようなツールを使う必要があります。"

#: ../../getting-started/first-steps-with-celery.rst:174
msgid "For a complete listing of the command-line options available, do:"
msgstr "利用可能なコマンドラインオプションの全リストを見るには、次のコマンドを実行してください。"

#: ../../getting-started/first-steps-with-celery.rst:180
msgid ""
"There are also several other commands available, and help is also available:"
msgstr "他にも利用可能なコマンドがあります。またヘルプも利用できます。"

#: ../../getting-started/first-steps-with-celery.rst:191
msgid "Calling the task"
msgstr "タスクの呼び出し"

#: ../../getting-started/first-steps-with-celery.rst:193
msgid "To call our task you can use the :meth:`~@Task.delay` method."
msgstr "Celery タスクを呼び出すには :meth:`~@Task.delay` メソッドを使うことができます。"

#: ../../getting-started/first-steps-with-celery.rst:195
msgid ""
"This is a handy shortcut to the :meth:`~@Task.apply_async` method which "
"gives greater control of the task execution (see :ref:`guide-calling`)::"
msgstr ""
"このメソッドはタスクの実行を細かくコントロールできる "
":meth:`~@Task.apply_async` メソッド(:ref:`guide-calling` を参照)の便利なショートカットです。"

#: ../../getting-started/first-steps-with-celery.rst:202
msgid ""
"The task has now been processed by the worker you started earlier, and you "
"can verify that by looking at the workers console output."
msgstr ""
"これでタスクは先程起動したワーカーによって処理されました。"
"ワーカーのコンソールに出力された内容を確認することができます。"

#: ../../getting-started/first-steps-with-celery.rst:205
msgid ""
"Calling a task returns an :class:`~@AsyncResult` instance, which can be used"
" to check the state of the task, wait for the task to finish or get its "
"return value (or if the task failed, the exception and traceback). But this "
"isn't enabled by default, and you have to configure Celery to use a result "
"backend, which is detailed in the next section."
msgstr ""
"タスクを呼び出すと、:class:`~@AsyncResult` インスタンスが返されます。"
"このインスタンスを使って、タスクの状態確認、タスク終了までの待機、タスクの戻り値"
"(タスクが失敗した場合は、その例外やトレースバック)の取得などが可能です。"
"しかし、この結果の取得機能はデフォルトでは有効になっておらず、Celery が"
"結果バックエンドを使うように設定する必要があります。詳細については次のセクションで説明します。"

#: ../../getting-started/first-steps-with-celery.rst:214
msgid "Keeping Results"
msgstr "結果の取得"

#: ../../getting-started/first-steps-with-celery.rst:216
msgid ""
"If you want to keep track of the tasks' states, Celery needs to store or "
"send the states somewhere.  There are several built-in result backends to "
"choose from: `SQLAlchemy`_/`Django`_ ORM, `Memcached`_, `Redis`_, AMQP "
"(`RabbitMQ`_), and `MongoDB`_ -- or you can define your own."
msgstr ""
"タスクの状態を調べるためには、Celery はタスクの状態をどこかに保存または送信する必要があります。"
"いくつか組み込みの結果バックエンドがあります。"
"`SQLAlchemy`_/`Django`_ ORM, `Memcached`_, `Redis`_, AMQP "
"(`RabbitMQ`_), `MongoDB`_ -- または自分で定義することも可能です。"

#: ../../getting-started/first-steps-with-celery.rst:226
msgid ""
"For this example you will use the `amqp` result backend, which sends states "
"as messages.  The backend is specified via the ``backend`` argument to "
":class:`@Celery`, (or via the :setting:`CELERY_RESULT_BACKEND` setting if "
"you choose to use a configuration module)::"
msgstr ""
"今回の例では `amqp` の結果バックエンドを使います。`amqp` は状態をメッセージとして送信します。"
"バックエンドは :class:`@Celery` のコンストラクタに ``backend`` 引数で指定します。"
"(設定用のモジュールを使う場合は、:setting:`CELERY_RESULT_BACKEND` 設定で指定することもできます)"

#: ../../getting-started/first-steps-with-celery.rst:233
msgid ""
"or if you want to use Redis as the result backend, but still use RabbitMQ as"
" the message broker (a popular combination)::"
msgstr ""
"結果バックエンドに Redis を使いたい場合でも、メッセージブローカーには RabbitMQ を使えます(これは人気のある組み合わせです)。"

#: ../../getting-started/first-steps-with-celery.rst:238
msgid ""
"To read more about result backends please see :ref:`task-result-backends`."
msgstr ""
"結果バックエンドについての詳細は :ref:`task-result-backends` を参照してください。"

#: ../../getting-started/first-steps-with-celery.rst:240
msgid ""
"Now with the result backend configured, let's call the task again. This time"
" you'll hold on to the :class:`~@AsyncResult` instance returned when you "
"call a task::"
msgstr ""
"これで結果バックエンドの設定ができたので、もう一度タスクを呼び出してみましょう。"
"今回はタスクを呼び出し戻り値の :class:`~@AsyncResult` インスタンスを保持しておきます。"

#: ../../getting-started/first-steps-with-celery.rst:246
msgid ""
"The :meth:`~@AsyncResult.ready` method returns whether the task has finished"
" processing or not::"
msgstr ""
":meth:`~@AsyncResult.ready` メソッドはタスクの処理が終了したかどうかを判定します。"

#: ../../getting-started/first-steps-with-celery.rst:252
msgid ""
"You can wait for the result to complete, but this is rarely used since it "
"turns the asynchronous call into a synchronous one::"
msgstr ""
"タスクの処理が完了するまで待つこともできますが、非同期呼び出しが同期的になってしまうので、そんなことは滅多にすることありません。"

#: ../../getting-started/first-steps-with-celery.rst:258
msgid ""
"In case the task raised an exception, :meth:`~@AsyncResult.get` will re-"
"raise the exception, but you can override this by specifying the "
"``propagate`` argument::"
msgstr ""
"タスクが例外を送出した場合には、:meth:`~@AsyncResult.get` メソッドがその例外を"
"再度送出します。この挙動は ``propagete`` 引数を指定することによって変更できます。"

#: ../../getting-started/first-steps-with-celery.rst:265
msgid ""
"If the task raised an exception you can also gain access to the original "
"traceback::"
msgstr ""
"タスクが例外を送出した場合、元のトレースバックを取得することもできます。"

#: ../../getting-started/first-steps-with-celery.rst:271
msgid "See :mod:`celery.result` for the complete result object reference."
msgstr "結果オブジェクトのリファレンスは :mod:`celery.result` モジュールを参照してください。"

#: ../../getting-started/first-steps-with-celery.rst:276
msgid "Configuration"
msgstr "設定"

#: ../../getting-started/first-steps-with-celery.rst:278
msgid ""
"Celery, like a consumer appliance doesn't need much to be operated. It has "
"an input and an output, where you must connect the input to a broker and "
"maybe the output to a result backend if so wanted.  But if you look closely "
"at the back there's a lid revealing loads of sliders, dials and buttons: "
"this is the configuration."
msgstr ""
"Celery は一般の家電製品と同じく、操作しなければいけない箇所はそんなにありません。"
"入力と出力がありますが、入力はブローカーに送って、出力は必要な場合に結果バックエンドから取りだすだけです。"
"しかし Celery の裏側をよく見ると、たくさんのスライダーやダイヤル、ボタンを隠している蓋があるんです。"
"この蓋を開けて Celery を「設定」することができるのです。"

#: ../../getting-started/first-steps-with-celery.rst:283
msgid ""
"The default configuration should be good enough for most uses, but there's "
"many things to tweak so Celery works just the way you want it to. Reading "
"about the options available is a good idea to get familiar with what can be "
"configured. You can read about the options in the :ref:`configuration` "
"reference."
msgstr ""
"ほとんどのユースケースではデフォルトの設定で十分でしょうが、Celery を思い通りに"
"動作させるために調整できるものがたくさんあります。"
"何が設定できるのかを知るためには、利用可能なオプションを読むのがいいでしょう。"
":ref:`configuration` リファレンスがそれです。"

#: ../../getting-started/first-steps-with-celery.rst:289
msgid ""
"The configuration can be set on the app directly or by using a dedicated "
"configuration module. As an example you can configure the default serializer"
" used for serializing task payloads by changing the "
":setting:`CELERY_TASK_SERIALIZER` setting:"
msgstr ""
"設定は、app インスタンスに直接セットすることもできますし、専用の設定モジュールを使うこともできます。"
"こごては例として、タスクデータをシリアライズするのに使われるデフォルトのシリアライザーを"
"変更するため、:setting:`CELERY_TASK_SERIALIZER` オプションを設定してみましょう。"

#: ../../getting-started/first-steps-with-celery.rst:298
msgid "If you are configuring many settings at once you can use ``update``:"
msgstr "たくさんの項目を一気に設定するなら、``update`` を使えます。"

#: ../../getting-started/first-steps-with-celery.rst:310
msgid ""
"For larger projects using a dedicated configuration module is useful, in "
"fact you are discouraged from hard coding periodic task intervals and task "
"routing options, as it is much better to keep this in a centralized "
"location, and especially for libraries it makes it possible for users to "
"control how they want your tasks to behave, you can also imagine your "
"SysAdmin making simple changes to the configuration in the event of system "
"trouble."
msgstr ""
"大きなプロジェクトでは専用の設定モジュールを使った方が利便性が向上します。"
"定期タスクのインターバルやタスクのルーティングオプションをハードコーティングするのは"
"避け、設定を一カ所にまとめておく方が良いやり方です。"
"特にライブラリとして提供するのであれば、設定がまとまっていればユーザーがタスクの振る舞いを"
"コントロールできますし、システムトラブルの際には管理者がちゃちゃっと設定を変えることもできることでしょう。"

#: ../../getting-started/first-steps-with-celery.rst:318
msgid ""
"You can tell your Celery instance to use a configuration module, by calling "
"the :meth:`~@Celery.config_from_object` method:"
msgstr ""
":meth:`~@Celery.config_from_object` メソッドを通して Celery インスタンスに"
"設定モジュールを使うように命令できます。"

#: ../../getting-started/first-steps-with-celery.rst:325
msgid ""
"This module is often called \"``celeryconfig``\", but you can use any module"
" name."
msgstr ""
"このモジュールは \"``celeryconfig``\" という名前がよく使われますが、他の名前を使っても問題ありません。"

#: ../../getting-started/first-steps-with-celery.rst:328
msgid ""
"A module named ``celeryconfig.py`` must then be available to load from the "
"current directory or on the Python path, it could look like this:"
msgstr ""
"``celeryconfig.py`` モジュールはカレントディレクトリ、または Python パスから読み込めるようにしておかなければいけません。"
"中身は以下のようになります。"

#: ../../getting-started/first-steps-with-celery.rst:331
#: ../../getting-started/first-steps-with-celery.rst:356
#: ../../getting-started/first-steps-with-celery.rst:368
msgid ":file:`celeryconfig.py`:"
msgstr ""

#: ../../getting-started/first-steps-with-celery.rst:344
msgid ""
"To verify that your configuration file works properly, and doesn't contain "
"any syntax errors, you can try to import it:"
msgstr ""
"設定ファイルに文法エラーがなく、正しく作動するかどうか確認するには、次のようにモジュールをインポートします。"

#: ../../getting-started/first-steps-with-celery.rst:351
msgid ""
"For a complete reference of configuration options, see :ref:`configuration`."
msgstr ""
"設定オプションの全リファレンスは、:ref:`configuration` を参照してください。"

#: ../../getting-started/first-steps-with-celery.rst:353
msgid ""
"To demonstrate the power of configuration files, this how you would route a "
"misbehaving task to a dedicated queue:"
msgstr ""
"設定ファイルの凄さを見せましょう。次のようにすると、おかしな動作をするタスクはそれ専用のキューに入ります。"

#: ../../getting-started/first-steps-with-celery.rst:364
msgid ""
"Or instead of routing it you could rate limit the task instead, so that only"
" 10 tasks of this type can be processed in a minute (10/m):"
msgstr ""
"タスクの実行レートを制限して、1 分間に 10 タスクだけ実行されるようにもできます。"

#: ../../getting-started/first-steps-with-celery.rst:376
msgid ""
"If you are using RabbitMQ or Redis as the broker then you can also direct "
"the workers to set a new rate limit for the task at runtime:"
msgstr ""
"ブローカーに RabbitMQ か Redis を使っている場合には、ワーカーに対して動的に"
"タスクの実行レート制限値をセットできます。"

#: ../../getting-started/first-steps-with-celery.rst:386
msgid ""
"See :ref:`guide-routing` to read more about task routing, and the "
":setting:`CELERY_ANNOTATIONS` setting for more about annotations, or :ref"
":`guide-monitoring` for more about remote control commands, and how to "
"monitor what your workers are doing."
msgstr ""
"タスクルーティングについては :ref:`guide-routing`、"
"アノテーションについては :setting:`CELERY_ANNOTATIONS` オプション、"
"リモートコントロールコマンドとワーカーの状態監視については :ref:`guide-monitoring` を参照してください。"

#: ../../getting-started/first-steps-with-celery.rst:392
msgid "Where to go from here"
msgstr "お次は？"

#: ../../getting-started/first-steps-with-celery.rst:394
msgid ""
"If you want to learn more you should continue to the :ref:`Next Steps <next-"
"steps>` tutorial, and after that you can study the :ref:`User Guide "
"<guide>`."
msgstr ""
"もっと Celery について学びたい場合は :ref:`Next Steps <next-steps>` チュートリアルに進み、"
"その後 :ref:`User Guide <guide>` を読むことをお薦めします。"

#: ../../getting-started/first-steps-with-celery.rst:401
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#: ../../getting-started/first-steps-with-celery.rst:403
msgid "There's also a troubleshooting section in the :ref:`faq`."
msgstr ":ref:`faq` にもトラブルシューティングのセクションがあります。"

#: ../../getting-started/first-steps-with-celery.rst:406
msgid "Worker does not start: Permission Error"
msgstr "ワーカーが起動しない: Permission Error"

#: ../../getting-started/first-steps-with-celery.rst:408
msgid "If you're using Debian, Ubuntu or other Debian-based distributions:"
msgstr "Debian、Ubuntu または Debian ベースのディストリビューションを使っている:"

#: ../../getting-started/first-steps-with-celery.rst:410
msgid "Debian recently renamed the ``/dev/shm`` special file to ``/run/shm``."
msgstr "Debian は最近 ``/dev/shm`` を ``/run/shm`` という名前に変更しました。"

#: ../../getting-started/first-steps-with-celery.rst:412
msgid "A simple workaround is to create a symbolic link:"
msgstr "簡潔な回避策としてシンボリックリンクを作ります。"

#: ../../getting-started/first-steps-with-celery.rst:418
msgid "Others:"
msgstr "その他:"

#: ../../getting-started/first-steps-with-celery.rst:420
msgid ""
"If you provide any of the :option:`--pidfile`, :option:`--logfile` or "
"``--statedb`` arguments, then you must make sure that they point to a "
"file/directory that is writable and readable by the user starting the "
"worker."
msgstr ""
"ワーカーに :option:`--pidfile`、 :option:`--logfile` または ``--statedb`` 引数を付けている場合は、"
"それらのオプションに指定しているファイルやディレクトリに対して、ワーカーの実行ユーザーが"
"読み込み＋書き込み権限があるかどうか確認してください。"


#: ../../getting-started/first-steps-with-celery.rst:426
msgid "Result backend does not work or tasks are always in ``PENDING`` state."
msgstr "結果バックエンドが機能しない、タスクが常に ``PENDING`` ステートのまま。"

#: ../../getting-started/first-steps-with-celery.rst:428
msgid ""
"All tasks are ``PENDING`` by default, so the state would have been better "
"named \"unknown\".  Celery does not update any state when a task is sent, "
"and any task with no history is assumed to be pending (you know the task id "
"after all)."
msgstr ""
"すべてのタスクはデフォルトでは ``PENDING`` です。\"unkown\" という名前のステートにした方が良かったのかも知れませんが。"
"Celery はタスクが送信された段階ではステートをアップデートしません。なので、何の履歴もないタスクはペンディングになります。"

#: ../../getting-started/first-steps-with-celery.rst:433
msgid "Make sure that the task does not have ``ignore_result`` enabled."
msgstr "タスクの ``ignore_result`` が有効になっていないことを確認してください。"

#: ../../getting-started/first-steps-with-celery.rst:435
msgid "Enabling this option will force the worker to skip updating states."
msgstr "このオプションが有効になっていると、ワーカーはステートのアップデートをスキップします。"

#: ../../getting-started/first-steps-with-celery.rst:438
msgid "Make sure the :setting:`CELERY_IGNORE_RESULT` setting is not enabled."
msgstr ":setting:`CELERY_IGNORE_RESULT` 設定オプションが有効になっていないことを確認してください。"

#: ../../getting-started/first-steps-with-celery.rst:440
msgid "Make sure that you do not have any old workers still running."
msgstr "起動中のままの古いワーカーがいないことを確認してください。"

#: ../../getting-started/first-steps-with-celery.rst:442
msgid ""
"It's easy to start multiple workers by accident, so make sure that the "
"previous worker is properly shutdown before you start a new one."
msgstr ""
"うっかり複数のワーカーを立ち上げてしまいやすいので、新しいワーカーを起動する前に"
"以前のワーカーを正しく終了されていることを確認するようにしてください。"

#: ../../getting-started/first-steps-with-celery.rst:445
msgid ""
"An old worker that is not configured with the expected result backend may be"
" running and is hijacking the tasks."
msgstr ""
"指定した結果バックエンドが設定されていない古いワーカーが動いていると、タスクをハイジャックしてしまいます。"

#: ../../getting-started/first-steps-with-celery.rst:448
msgid ""
"The `--pidfile` argument can be set to an absolute path to make sure this "
"doesn't happen."
msgstr ""
"このように複数のワーカーを起動してしまわないように `--pidfile` に絶対パスを指定することができます。"


#: ../../getting-started/first-steps-with-celery.rst:451
msgid "Make sure the client is configured with the right backend."
msgstr "クライアントが正しいバックエンドを使うように設定されているか確認してください。"

#: ../../getting-started/first-steps-with-celery.rst:453
msgid ""
"If for some reason the client is configured to use a different backend than "
"the worker, you will not be able to receive the result, so make sure the "
"backend is correct by inspecting it:"
msgstr ""
"何らかの理由でクライアントがワーカーと異なるバックエンドを使うように設定されてしまうと、"
"結果を受け取ることができません。次のようにしてバックエンドが正しく設定されているか確認してください。"
