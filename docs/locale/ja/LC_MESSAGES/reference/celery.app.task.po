# 
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/celery.app.task.rst:3 ../../../celery/app/task.pydocstring
#: of celery.app.task:2
msgid "celery.app.task"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task:4
msgid "Task Implementation: Task request context, and the base task class."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task:1
msgid "Task base class."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task:3
msgid ""
"When called tasks apply the :meth:`run` method.  This method must be defined"
" by all tasks (that is unless the :meth:`__call__` method is overridden)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.AsyncResult:1
msgid "Get AsyncResult instance for this kind of task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.AsyncResult:3
msgid "Task id to get result for."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:1
msgid "Defines how and when task error e-mails should be sent."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:3
msgid "The task instance that raised the error."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:5
msgid ""
":attr:`subject` and :attr:`body` are format strings which are passed a "
"context containing the following keys:"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:8
msgid "name"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:10
#: ../../../celery/app/task.pydocstring of celery.app.task.Task.name:1
msgid "Name of the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:12
msgid "id"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:14
msgid "UUID of the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:16
msgid "exc"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:18
msgid "String representation of the exception."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:20
msgid "args"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:22
msgid "Positional arguments."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:24
msgid "kwargs"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:26
msgid "Keyword arguments."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:28
msgid "traceback"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:30
msgid "String representation of the traceback."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:32
msgid "hostname"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.ErrorMail:34
msgid "Worker nodename."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.ErrorMail.should_send:1
msgid ""
"Return true or false depending on if a task error mail should be sent for "
"this type of error."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.MaxRetriesExceededError:1
msgid "The tasks max restart limit has been exceeded."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.Strategy:1
msgid "Execution strategy used, or the qualified name of one."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.abstract:1
msgid "If :const:`True` the task is an abstract base class."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.accept_magic_kwargs:1
msgid ""
"If disabled the worker will not forward magic keyword arguments. Deprecated "
"and scheduled for removal in v4.0."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.acks_late:1
msgid ""
"When enabled messages for this task will be acknowledged **after** the task "
"has been executed, and not *just before* which is the default behavior."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.acks_late:5
msgid ""
"Please note that this means the task may be executed twice if the worker "
"crashes mid execution (which may be acceptable for some applications)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.acks_late:9
msgid ""
"The application default can be overridden with the "
":setting:`CELERY_ACKS_LATE` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.after_return:1
msgid "Handler called after the task returns."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.after_return:3
msgid "Current task state."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.after_return:4
msgid "Task return value/exception."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.after_return:5
msgid "Unique id of the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.after_return:6
#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:7
msgid "Original arguments for the task that failed."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.after_return:7
#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:8
msgid "Original keyword arguments for the task that failed."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.after_return:10
msgid ""
":class:`~billiard.einfo.ExceptionInfo` instance, containing the traceback "
"(if any)."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.after_return:13 ../../../celery/app/task.pydocstring
#: of celery.app.task.Task.on_failure:14 ../../../celery/app/task.pydocstring
#: of celery.app.task.Task.on_retry:13 ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.on_success:10
msgid "The return value of this handler is ignored."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply:1
msgid "Execute this task locally, by blocking until the task returns."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply:3
#: ../../../celery/app/task.pydocstring of celery.app.task.Task.delay:5
msgid "positional arguments passed on to the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply:4
#: ../../../celery/app/task.pydocstring of celery.app.task.Task.delay:6
msgid "keyword arguments passed on to the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply:5
msgid ""
"Re-raise task exceptions.  Defaults to the "
":setting:`CELERY_EAGER_PROPAGATES_EXCEPTIONS` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply:9
msgid ":rtype :class:`celery.result.EagerResult`:"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:1
msgid "Apply tasks asynchronously by sending a message."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:3
msgid ""
"The positional arguments to pass on to the task (a :class:`list` or "
":class:`tuple`)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:6
msgid "The keyword arguments to pass on to the task (a :class:`dict`)"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:9
msgid ""
"Number of seconds into the future that the task should execute. Defaults to "
"immediate execution."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:13
msgid ""
"A :class:`~datetime.datetime` object describing the absolute time and date "
"of when the task should be executed.  May not be specified if `countdown` is"
" also supplied."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:18
msgid ""
"Either a :class:`int`, describing the number of seconds, or a "
":class:`~datetime.datetime` object that describes the absolute time and date"
" of when the task should expire.  The task will not be executed after the "
"expiration time."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:24
msgid "Re-use existing broker connection instead of establishing a new one."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:27
msgid ""
"If enabled sending of the task message will be retried in the event of "
"connection loss or failure.  Default is taken from the "
":setting:`CELERY_TASK_PUBLISH_RETRY` setting.  Note you need to handle the "
"producer/connection manually for this to work."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:33
msgid ""
"Override the retry policy used.  See the "
":setting:`CELERY_TASK_PUBLISH_RETRY` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:36
msgid ""
"Custom routing key used to route the task to a worker server. If in "
"combination with a ``queue`` argument only used to specify custom routing "
"keys to topic exchanges."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:41
msgid ""
"The queue to route the task to.  This must be a key present in "
":setting:`CELERY_QUEUES`, or :setting:`CELERY_CREATE_MISSING_QUEUES` must be"
" enabled.  See :ref:`guide-routing` for more information."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:47
msgid ""
"Named custom exchange to send the task to. Usually not used in combination "
"with the ``queue`` argument."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:51
msgid ""
"The task priority, a number between 0 and 9. Defaults to the "
":attr:`priority` attribute."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:54
msgid ""
"A string identifying the default serialization method to use.  Can be "
"`pickle`, `json`, `yaml`, `msgpack` or any custom serialization method that "
"has been registered with :mod:`kombu.serialization.registry`. Defaults to "
"the :attr:`serializer` attribute."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:61
msgid ""
"A string identifying the compression method to use.  Can be one of ``zlib``,"
" ``bzip2``, or any custom compression methods registered with "
":func:`kombu.compression.register`. Defaults to the "
":setting:`CELERY_MESSAGE_COMPRESSION` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:67
msgid "A single, or a list of tasks to apply if the task exits successfully."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:69
msgid ""
"A single, or a list of tasks to apply if an error occurs while executing the"
" task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:72
msgid ":class:~@amqp.TaskProducer` instance to use."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:73
msgid ""
"If set to True (default) and the task is applied while executing another "
"task, then the result will be appended to the parent tasks "
"``request.children`` attribute.  Trailing can also be disabled by default "
"using the :attr:`trail` attribute"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:78
msgid "Deprecated alias to ``producer``."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:80
msgid ""
"Also supports all keyword arguments supported by "
":meth:`kombu.Producer.publish`."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.apply_async:84
msgid ""
"If the :setting:`CELERY_ALWAYS_EAGER` setting is set, it will be replaced by"
" a local :func:`apply` call instead."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.autoregister:1
msgid "If disabled this task won't be registered automatically."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.backend:1
msgid "The result store backend used for this task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.chunks:1
msgid "Creates a :class:`~celery.canvas.chunks` task for this task."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.default_retry_delay:1
msgid ""
"Default time in seconds before a retry of the task should be executed.  3 "
"minutes by default."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.delay:1
msgid "Star argument version of :meth:`apply_async`."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.delay:3
msgid "Does not support the extra options enabled by :meth:`apply_async`."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.delay:8
msgid ":returns :class:`celery.result.AsyncResult`:"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.expires:1
msgid "Default task expiry time."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.ignore_result:1
msgid ""
"If enabled the worker will not store task state and return values for this "
"task.  Defaults to the :setting:`CELERY_IGNORE_RESULT` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.map:1
msgid "Creates a :class:`~celery.canvas.xmap` task from ``it``."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.max_retries:1
msgid ""
"Maximum number of retries before giving up.  If set to :const:`None`, it "
"will **never** stop retrying."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_bound:1
msgid ""
"This method can be defined to do additional actions when the task class is "
"bound to an app."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:1
msgid "Error handler."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:3
msgid "This is run by the worker when the task fails."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:5
msgid "The exception raised by the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:6
msgid "Unique id of the failed task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_failure:11
#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:10
msgid ""
":class:`~billiard.einfo.ExceptionInfo` instance, containing the traceback."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:1
msgid "Retry handler."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:3
msgid "This is run by the worker when the task is to be retried."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:5
msgid "The exception sent to :meth:`retry`."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:6
msgid "Unique id of the retried task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:7
msgid "Original arguments for the retried task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_retry:8
msgid "Original keyword arguments for the retried task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_success:1
msgid "Success handler."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_success:3
msgid "Run by the worker if the task executes successfully."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_success:5
msgid "The return value of the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_success:6
msgid "Unique id of the executed task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_success:7
msgid "Original arguments for the executed task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.on_success:8
msgid "Original keyword arguments for the executed task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.rate_limit:1
msgid ""
"Rate limit for this task type.  Examples: :const:`None` (no rate limit), "
"`'100/s'` (hundred tasks a second), `'100/m'` (hundred tasks a "
"minute),`'100/h'` (hundred tasks an hour)"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.request:1
msgid "Get current request object."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:1
msgid "Retry the task."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:3
msgid "Positional arguments to retry with."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:4
msgid "Keyword arguments to retry with."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:5
msgid ""
"Custom exception to report when the max restart limit has been exceeded "
"(default: :exc:`~@MaxRetriesExceededError`).  If this argument is set and "
"retry is called while an exception was raised (``sys.exc_info()`` is set) it"
" will attempt to reraise the current exception.  If no exception was raised "
"it will raise the ``exc`` argument provided."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:5
msgid ""
"Custom exception to report when the max restart limit has been exceeded "
"(default: :exc:`~@MaxRetriesExceededError`)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:9
msgid ""
"If this argument is set and retry is called while an exception was raised "
"(``sys.exc_info()`` is set) it will attempt to reraise the current "
"exception."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:13
msgid ""
"If no exception was raised it will raise the ``exc`` argument provided."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:15
msgid "Time in seconds to delay the retry for."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:16
msgid ""
"Explicit time and date to run the retry at (must be a "
":class:`~datetime.datetime` instance)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:18
msgid "If set, overrides the default retry limit."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:19
msgid "If set, overrides the default time limit."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:20
msgid "If set, overrides the default soft time limit."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:22
msgid "Any extra options to pass on to meth:`apply_async`."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:24
msgid ""
"If this is :const:`False`, do not raise the :exc:`~@Retry` exception, that "
"tells the worker to mark the task as being retried.  Note that this means "
"the task will be marked as failed if the task raises an exception, or "
"successful if it returns."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:31
msgid ""
"To tell the worker that the task has been re-sent for retry. This always "
"happens, unless the `throw` keyword argument has been explicitly set to "
":const:`False`, and is considered normal operation."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:36
msgid "**Example**"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.retry:52
msgid ""
"Although the task will never return above as `retry` raises an exception to "
"notify the worker, we use `raise` in front of the retry to convey that the "
"rest of the block will not be executed."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.run:1
msgid "The body of the task executed by workers."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.s:1
msgid "``.s(*a, **k) -> .subtask(a, k)``"
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.send_error_emails:1
msgid ""
"If enabled an email will be sent to :setting:`ADMINS` whenever a task of "
"this type fails."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.serializer:1
msgid ""
"The name of a serializer that are registered with "
":mod:`kombu.serialization.registry`.  Default is `'pickle'`."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.si:1
msgid "``.si(*a, **k) -> .subtask(a, k, immutable=True)``"
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.soft_time_limit:1
msgid ""
"Soft time limit. Defaults to the :setting:`CELERYD_TASK_SOFT_TIME_LIMIT` "
"setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.starmap:1
msgid "Creates a :class:`~celery.canvas.xstarmap` task from ``it``."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.store_errors_even_if_ignored:1
msgid ""
"When enabled errors will be stored even if the task is otherwise configured "
"to ignore results."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.subtask:1
msgid ""
"Return :class:`~celery.signature` object for this task, wrapping arguments "
"and execution options for a single task invocation."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.throws:1
msgid "Tuple of expected exceptions."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.throws:3
msgid ""
"These are errors that are expected in normal operation and that should not "
"be regarded as a real error by the worker. Currently this means that the "
"state will be updated to an error state, but the worker will not log the "
"event as an error."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.time_limit:1
msgid ""
"Hard time limit. Defaults to the :setting:`CELERYD_TASK_TIME_LIMIT` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.track_started:1
msgid ""
"If enabled the task will report its status as 'started' when the task is "
"executed by a worker.  Disabled by default as the normal behaviour is to not"
" report that level of granularity.  Tasks are either pending, finished, or "
"waiting to be retried."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.track_started:6
msgid ""
"Having a 'started' status can be useful for when there are long running "
"tasks and there is a need to report which task is currently running."
msgstr ""

#: ../../../celery/app/task.pydocstring of
#: celery.app.task.Task.track_started:10
msgid ""
"The application default can be overridden using the "
":setting:`CELERY_TRACK_STARTED` setting."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.trail:1
msgid ""
"If enabled the request will keep track of subtasks started by this task, and"
" this information will be sent with the result (``result.children``)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.update_state:1
msgid "Update task state."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.update_state:3
msgid "Id of the task to update, defaults to the id of the current task"
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.update_state:5
msgid "New state (:class:`str`)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.Task.update_state:6
msgid "State metadata (:class:`dict`)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.TaskType:1
msgid "Meta class for tasks."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.TaskType:3
msgid ""
"Automatically registers the task in the task registry (except if the "
":attr:`Task.abstract`` attribute is set)."
msgstr ""

#: ../../../celery/app/task.pydocstring of celery.app.task.TaskType:6
msgid ""
"If no :attr:`Task.name` attribute is provided, then the name is generated "
"from the module and class name."
msgstr ""
