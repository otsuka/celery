# 
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../django/first-steps-with-django.rst:5
msgid "First steps with Django"
msgstr ""

#: ../../django/first-steps-with-django.rst:8
msgid "Using Celery with Django"
msgstr ""

#: ../../django/first-steps-with-django.rst:12
msgid ""
"Previous versions of Celery required a separate library to work with Django,"
" but since 3.1 this is no longer the case. Django is supported out of the "
"box now so this document only contains a basic way to integrate Celery and "
"Django.  You will use the same API as non-Django users so it's recommended "
"that you read the :ref:`first-steps` tutorial first and come back to this "
"tutorial.  When you have a working example you can continue to the :ref"
":`next-steps` guide."
msgstr ""

#: ../../django/first-steps-with-django.rst:20
msgid ""
"To use Celery with your Django project you must first define an instance of "
"the Celery library (called an \"app\")"
msgstr ""

#: ../../django/first-steps-with-django.rst:23
msgid "If you have a modern Django project layout like::"
msgstr ""

#: ../../django/first-steps-with-django.rst:31
msgid ""
"then the recommended way is to create a new `proj/proj/celery.py` module "
"that defines the Celery instance:"
msgstr ""

#: ../../django/first-steps-with-django.rst:34
msgid "`proj/proj/celery.py`"
msgstr ""

#: ../../django/first-steps-with-django.rst:38
msgid ""
"Then you need to import this app in your :file:`proj/proj/__init__.py` "
"module.  This ensures that the app is loaded when Django starts so that the "
"``@shared_task`` decorator (mentioned later) will use it:"
msgstr ""

#: ../../django/first-steps-with-django.rst:42
msgid ":file:`proj/proj/__init__.py`:"
msgstr ""

#: ../../django/first-steps-with-django.rst:46
msgid ""
"Note that this example project layout is suitable for larger projects, for "
"simple projects you may use a single contained module that defines both the "
"app and tasks, like in the :ref:`tut-celery` tutorial."
msgstr ""

#: ../../django/first-steps-with-django.rst:50
msgid ""
"Let's break down what happens in the first module, first we import absolute "
"imports from the future, so that our ``celery.py`` module will not clash "
"with the library:"
msgstr ""

#: ../../django/first-steps-with-django.rst:58
msgid ""
"Then we set the default :envvar:`DJANGO_SETTINGS_MODULE` for the "
":program:`celery` command-line program:"
msgstr ""

#: ../../django/first-steps-with-django.rst:65
msgid ""
"You don't need this line, but it saves you from always passing in the "
"settings module to the celery program.  It must always come before creating "
"the app instances, which is what we do next:"
msgstr ""

#: ../../django/first-steps-with-django.rst:73
msgid ""
"This is our instance of the library, you can have many instances but there's"
" probably no reason for that when using Django."
msgstr ""

#: ../../django/first-steps-with-django.rst:76
msgid ""
"We also add the Django settings module as a configuration source for Celery."
"  This means that you don't have to use multiple configuration files, and "
"instead configure Celery directly from the Django settings."
msgstr ""

#: ../../django/first-steps-with-django.rst:81
msgid ""
"You can pass the object directly here, but using a string is better since "
"then the worker doesn't have to serialize the object when using Windows or "
"execv:"
msgstr ""

#: ../../django/first-steps-with-django.rst:89
msgid ""
"Next, a common practice for reusable apps is to define all tasks in a "
"separate ``tasks.py`` module, and Celery does have a way to autodiscover "
"these modules:"
msgstr ""

#: ../../django/first-steps-with-django.rst:97
msgid ""
"With the line above Celery will automatically discover tasks in reusable "
"apps if you follow the ``tasks.py`` convention::"
msgstr ""

#: ../../django/first-steps-with-django.rst:107
msgid ""
"This way you do not have to manually add the individual modules to the "
":setting:`CELERY_IMPORTS` setting.  The ``lambda`` so that the autodiscovery"
" can happen only when needed, and so that importing your module will not "
"evaluate the Django settings object."
msgstr ""

#: ../../django/first-steps-with-django.rst:112
msgid ""
"Finally, the ``debug_task`` example is a task that dumps its own request "
"information.  This is using the new ``bind=True`` task option introduced in "
"Celery 3.1 to easily refer to the current task instance."
msgstr ""

#: ../../django/first-steps-with-django.rst:117
msgid "Using the ``@shared_task`` decorator"
msgstr ""

#: ../../django/first-steps-with-django.rst:119
msgid ""
"The tasks you write will probably live in reusable apps, and reusable apps "
"cannot depend on the project itself, so you also cannot import your app "
"instance directly."
msgstr ""

#: ../../django/first-steps-with-django.rst:123
msgid ""
"The ``@shared_task`` decorator lets you create tasks without having any "
"concrete app instance:"
msgstr ""

#: ../../django/first-steps-with-django.rst:126
msgid ":file:`demoapp/tasks.py`:"
msgstr ""

#: ../../django/first-steps-with-django.rst:133
msgid ""
"You can find the full source code for the Django example project at: "
"https://github.com/celery/celery/tree/3.1/examples/django/"
msgstr ""

#: ../../django/first-steps-with-django.rst:137
msgid "Using the Django ORM/Cache as a result backend."
msgstr ""

#: ../../django/first-steps-with-django.rst:139
msgid ""
"The ``django-celery`` library defines result backends that uses the Django "
"ORM and Django Cache frameworks."
msgstr ""

#: ../../django/first-steps-with-django.rst:142
msgid "To use this with your project you need to follow these four steps:"
msgstr ""

#: ../../django/first-steps-with-django.rst:144
msgid "Install the ``django-celery`` library:"
msgstr ""

#: ../../django/first-steps-with-django.rst:150
msgid "Add ``djcelery`` to ``INSTALLED_APPS``."
msgstr ""

#: ../../django/first-steps-with-django.rst:152
msgid "Create the celery database tables."
msgstr ""

#: ../../django/first-steps-with-django.rst:154
msgid ""
"This step will create the tables used to store results when using the "
"database result backend and the tables used by the database periodic task "
"scheduler.  You can skip this step if you don't use these."
msgstr ""

#: ../../django/first-steps-with-django.rst:159
msgid "If you are using south_ for schema migrations, you'll want to:"
msgstr ""

#: ../../django/first-steps-with-django.rst:165
msgid "For those who are not using south, a normal ``syncdb`` will work:"
msgstr ""

#: ../../django/first-steps-with-django.rst:171
msgid "Configure celery to use the django-celery backend."
msgstr ""

#: ../../django/first-steps-with-django.rst:173
msgid "For the database backend you must use:"
msgstr ""

#: ../../django/first-steps-with-django.rst:181
msgid "For the cache backend you can use:"
msgstr ""

#: ../../django/first-steps-with-django.rst:189
msgid ""
"If you have connected Celery to your Django settings then you can add this "
"directly into your settings module (without the ``app.conf.update`` part)"
msgstr ""

#: ../../django/first-steps-with-django.rst:197
msgid "Relative Imports"
msgstr ""

#: ../../django/first-steps-with-django.rst:199
msgid ""
"You have to be consistent in how you import the task module, e.g. if you "
"have ``project.app`` in ``INSTALLED_APPS`` then you also need to import the "
"tasks ``from project.app`` or else the names of the tasks will be different."
msgstr ""

#: ../../django/first-steps-with-django.rst:204
msgid "See :ref:`task-naming-relative-imports`"
msgstr ""

#: ../../django/first-steps-with-django.rst:207
msgid "Starting the worker process"
msgstr ""

#: ../../django/first-steps-with-django.rst:209
msgid ""
"In a production environment you will want to run the worker in the "
"background as a daemon - see :ref:`daemonizing` - but for testing and "
"development it is useful to be able to start a worker instance by using the "
"``celery worker`` manage command, much as you would use Django's runserver:"
msgstr ""

#: ../../django/first-steps-with-django.rst:219
msgid ""
"For a complete listing of the command-line options available, use the help "
"command:"
msgstr ""

#: ../../django/first-steps-with-django.rst:227
msgid "Where to go from here"
msgstr ""

#: ../../django/first-steps-with-django.rst:229
msgid ""
"If you want to learn more you should continue to the :ref:`Next Steps <next-"
"steps>` tutorial, and after that you can study the :ref:`User Guide "
"<guide>`."
msgstr ""
