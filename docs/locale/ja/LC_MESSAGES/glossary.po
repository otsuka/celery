# 
msgid ""
msgstr ""
"Project-Id-Version: Celery 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-10 16:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../glossary.rst:4
msgid "Glossary"
msgstr ""

#: ../../glossary.rst:17
msgid "ack"
msgstr ""

#: ../../glossary.rst:19
msgid "Short for :term:`acknowledged`."
msgstr ""

#: ../../glossary.rst:8
msgid "acknowledged"
msgstr ""

#: ../../glossary.rst:10
msgid ""
"Workers acknowledge messages to signify that a message has been handled.  "
"Failing to acknowledge a message will cause the message to be redelivered."
"   Exactly when a transaction is considered a failure varies by transport.  "
"In AMQP the transaction fails when the connection/channel is closed (or "
"lost), but in Redis/SQS the transaction times out after a configurable "
"amount of time (the ``visibility_timeout``)."
msgstr ""

#: ../../glossary.rst:39
msgid "apply"
msgstr ""

#: ../../glossary.rst:41
msgid ""
"Originally a synonym to :term:`call <calling>` but used to signify that a "
"function is executed by the current process."
msgstr ""

#: ../../glossary.rst:32
msgid "billiard"
msgstr ""

#: ../../glossary.rst:34
msgid ""
"Fork of the Python multiprocessing library containing improvements required "
"by Celery."
msgstr ""

#: ../../glossary.rst:25
msgid "calling"
msgstr ""

#: ../../glossary.rst:27
msgid ""
"Sends a task message so that the task function is :term:`executed "
"<executing>` by a worker."
msgstr ""

#: ../../glossary.rst:70
msgid "cipater"
msgstr ""

#: ../../glossary.rst:72
msgid ""
"Celery release 3.1 named after song by Autechre "
"(http://www.youtube.com/watch?v=OHsaqUr_33Y)"
msgstr ""

#: ../../glossary.rst:43
msgid "context"
msgstr ""

#: ../../glossary.rst:45
msgid ""
"The context of a task contains information like the id of the task, it's "
"arguments and what queue it was delivered to. It can be accessed as the "
"tasks ``request`` attribute. See :ref:`task-request-info`"
msgstr ""

#: ../../glossary.rst:36
msgid "executing"
msgstr ""

#: ../../glossary.rst:38
msgid "Workers *execute* task :term:`requests <request>`."
msgstr ""

#: ../../glossary.rst:49
msgid "idempotent"
msgstr ""

#: ../../glossary.rst:51
msgid ""
"Idempotence is a mathematical property that describes a function that can be"
" called multiple times without changing the result. Practically it means "
"that a function can be repeated many times without unintented effects, but "
"not necessarily side-effect free in the pure sense (compare to "
":term:`nullipotent`)."
msgstr ""

#: ../../glossary.rst:29
msgid "kombu"
msgstr ""

#: ../../glossary.rst:31
msgid "Python messaging library used by Celery to send and receive messages."
msgstr ""

#: ../../glossary.rst:56
msgid "nullipotent"
msgstr ""

#: ../../glossary.rst:58
msgid ""
"describes a function that will have the same effect, and give the same "
"result, even if called zero or multiple times (side-effect free). A stronger"
" version of :term:`idempotent`."
msgstr ""

#: ../../glossary.rst:79
msgid "prefetch count"
msgstr ""

#: ../../glossary.rst:81
msgid ""
"Maximum number of unacknowledged messages a consumer can hold and if "
"exceeded the transport should not deliver any more messages to that "
"consumer.  See :ref:`optimizing-prefetch-limit`."
msgstr ""

#: ../../glossary.rst:74
msgid "prefetch multiplier"
msgstr ""

#: ../../glossary.rst:76
msgid ""
"The :term:`prefetch count` is configured by using the "
":setting:`CELERYD_PREFETCH_MULTIPLIER` setting, which is multiplied by the "
"number of pool slots (threads/processes/greenthreads)."
msgstr ""

#: ../../glossary.rst:61
msgid "reentrant"
msgstr ""

#: ../../glossary.rst:63
msgid ""
"describes a function that can be interrupted in the middle of execution "
"(e.g. by hardware interrupt or signal) and then safely called again later.  "
"Reentrancy is not the same as :term:`idempotence <idempotent>` as the return"
" value does not have to be the same given the same inputs, and a reentrant "
"function may have side effects as long as it can be interrupted;  An "
"idempotent function is always reentrant, but the reverse may not be true."
msgstr ""

#: ../../glossary.rst:20
msgid "request"
msgstr ""

#: ../../glossary.rst:22
msgid ""
"Task messages are converted to *requests* within the worker. The request "
"information is also available as the task's :term:`context` (the "
"``task.request`` attribute)."
msgstr ""
